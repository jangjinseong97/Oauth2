global:
  oauth2:
    base-uri: /oauth2/authorization #FE 소셜 로그인 요청할 떄 사용할 주소값
    # 플랫폼과 통신을 3번정도 하는데 각 통신들이 하나의 작업을 위한 트랜잭션이라는 것을
    # 연결시키기 위해 쿠키를 사용. 즉 같은 작업이라고 인증용 쿠키
    authorization-request-cookie-name: oauth2_auth_request
    redirect-uri-param-cookie-name: redirect_uri
    cookie-expiry-seconds: 180
    authorized-redirect-uris:
      - http://localhost:8080/fe/redirect
      - http://192.168.0.144:5224/fe/redirect
      - http://112.222.157.156:5224/fe/redirect

const:
  default-page-size: 20

file:
  directory: D:\Students\jang jin seong\download\greengram_jpa

mybatis:
  mapper-locations: mappers/**/*.xml
  configuration:
    map-underscore-to-camel-case: true

spring:
  application:
    name: GreenGramVer2
  datasource:
    username: root
    password: green502
    url: jdbc:log4jdbc:mariadb://localhost/greengram_oauth2
    #url: jdbc:mariadb://localhost/greengram_ver2 기존꺼
    # 위처럼 log4jdbc를 넣어줘야 쿼리문의 로그가 찍힘
    driver-class-name: net.sf.log4jdbc.sql.jdbcapi.DriverSpy
    # 이것도 같이 작성 해줘야 됨
  jackson:
    default-property-inclusion: non_null

  security:
    oauth2:
      client:
        registration:
          google:
            client-id: a
            client-secret: a
            scope:
              - email
              - profile
          kakao:
            client-name: Kakao
            client-id: a
            client-secret: a
            client-authentication-method: client_secret_post #client-id, client-secret 쿼리스트링으로 날아가야 한다.
            authorization-grant-type: authorization_code #권한부여 유형(인가코드 > access-token 받는 방식 선택)
            redirect-uri: "{baseUrl}/{action}/oauth2/code/{registrationId}"
            # baseUrl 서버가 돌아가고 있는 host
            # action: login
            # registrationId: kakao
            # 즉 localhost:8080/login/oauth2/code/kakao 라는 url이 만들어짐

            scope:
              - profile_nickname
              - profile_image
              - account_email

          naver:
            client-name: Naver
            client-id: a
            client-secret: a
            client-authentication-method: client_secret_post
            authorization-grant-type: authorization_code
            redirect-uri: "{baseUrl}/{action}/oauth2/code/{registrationId}"
            scope:
              - name
              - email
              - profile_image

        provider:
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize #카카오 인증처리 url
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-info-authentication-method: header # 어디에 accessToken 을 담는지 default로 header 에 accessToken이 들어가긴 함
            user-name-attribute: id #유일값 속성명
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: id
            #user-info-authentication-method: header #들어가는 종류는 header, form, query 가 있다.


  jpa:
    database: mysql
    hibernate:
      #ddl-auto: create # entity를 서버 기동때마다 drop 후 clear함
      ddl-auto: update # entity가 없으면 create, 기존에 존재하는 엔터티는 컬럼을 새롭게 추가하는 것만 반영
    properties:
      hibernate:
        jdbc:
          batch_size: 50 # 한번에 처리
        format_sql: true #로그 찍는용도
        order_updates: true #JPA Batch 작업
    show_sql: true # JPA 가 만든 쿼리문 로그에 출력




  servlet:
    multipart:
      max-file-size: 15MB
      max-request-size: 40MB
      # 요청 전체의 크기(위의 file size는 파일 하나하나고 아래의 max는 들어오는 모든 파일 크기의 합

springdoc:
  swagger-ui:
    default-model-expand-depth: 10
    display-request-duration: true
    groups-order: asc
    operations-sorter: method
    path: /swagger
    tags-sorter: alpha
  cache:
    disabled: true

jwt:
  issuer: green@green.kr
  secret-key: studySpringbootaewrhc12vuoauvoou3ohhoah3v8ohxholv89x8v8uvuv3uadsv9uxqwervpxzipuv839u1oaufhoxmqbzihbuihib53v4gc54c

---